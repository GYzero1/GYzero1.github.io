{
    "version": "https://jsonfeed.org/version/1",
    "title": "云逸'bolg • All posts by \"php基础\" category",
    "description": "",
    "home_page_url": "http://gyzero.shop",
    "items": [
        {
            "id": "http://gyzero.shop/2023/11/16/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/php%E5%9F%BA%E7%A1%80/PHPecho%E5%92%8Cprint%E8%AF%AD%E5%8F%A5/PHPecho%E5%92%8Cprint%E8%AF%AD%E5%8F%A5/",
            "url": "http://gyzero.shop/2023/11/16/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/php%E5%9F%BA%E7%A1%80/PHPecho%E5%92%8Cprint%E8%AF%AD%E5%8F%A5/PHPecho%E5%92%8Cprint%E8%AF%AD%E5%8F%A5/",
            "title": "PHPecho和print语句",
            "date_published": "2023-11-16T09:35:40.000Z",
            "content_html": "<p>在 PHP 中，  <code>echo</code>  和   <code>print</code>  都用于输出数据到屏幕。这两者之间有一些小差异：</p>\n<h3 id=\"echo\"><a class=\"markdownIt-Anchor\" href=\"#echo\">#</a> <span class=\"rainbow\">echo </span></h3>\n<ul>\n<li><code>echo</code>  是一个语言结构，可以快速地输出一个或多个字符串。</li>\n<li>它比   <code>print</code>  稍快，因为它没有返回值。</li>\n<li><code>echo</code>  可以接受多个参数（这种用法不常见）。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"This \"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"string \"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"was \"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"made \"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"with multiple parameters.\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$c</span><span class=\"token comment\">// 输出变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/php/image-20231116175718835.png\" alt=\"image-20231116175718835\"></p>\n<h3 id=\"print\"><a class=\"markdownIt-Anchor\" href=\"#print\">#</a> <span class=\"rainbow\">print </span></h3>\n<ul>\n<li><code>print</code>  也是一个语言结构，但它只允许输出一个字符串，并总  <code>1</code> 。</li>\n<li>因此，  <code>print</code>  可以用在表达式中。</li>\n<li>相比于  <code>echo</code> ， <code>print</code>  的使用略微受限。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 由于 print 总是返回 1，它可以被用在表达式中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"This is a test.\"</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// $result 的值为 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/php/image-20231116183157154.png\" alt=\"image-20231116183157154\"></p>\n<h3 id=\"eofend-of-file\"><a class=\"markdownIt-Anchor\" href=\"#eofend-of-file\">#</a> <span class=\"rainbow\">EOF（End Of File）</span></h3>\n<p>是一个用于在脚本中指定一个字符串的结束的标识符。它经常与 heredoc 语法结合使用，来定义一个字符串，这个字符串中可以包含多行文本、变量、特殊字符等，而不需要担心字符串的引用问题。</p>\n<p><span class=\"rainbow\">插入复杂结构</span></p>\n<ul>\n<li>当你需要插入大量的 HTML 或者 SQL 语句时，heredoc 语法特别有用，它可以保持原格式不变，增加代码的可读性。</li>\n</ul>\n<p><span class=\"rainbow\">EOF 标识符命名：</span></p>\n<ul>\n<li>EOF 只是一个约定的标识符。你可以使用任何合法的标识符作为 heredoc 或 nowdoc 的开始和结束标记.</li>\n</ul>\n<p><span class=\"rainbow\">Heredoc 语法；</span></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$text</span> <span class=\"token operator\">=</span> <span class=\"token string heredoc-string\"><span class=\"token delimiter symbol\"><span class=\"token punctuation\">&lt;&lt;&lt;</span>EOF</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>这里是文本字符串的内容，可以跨越多行。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>它的结束标识符是“EOF”，位于行首，且后面紧跟一个分号。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量也可以被解析，例如：<span class=\"token interpolation\"><span class=\"token variable\">$variable</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter symbol\">EOF<span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 注意结束标识符 EOF 前不能有任何字符，包括空格和制表符。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><span class=\"rainbow\">在参数中直接使用 heredoc：</span></p>\n<ul>\n<li>heredoc 可以直接在函数或方法的参数中使用，无需先赋值给变量</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">printText</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$text</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printText</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token string single-quoted-string\">'TEXT'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Line <span class=\"token number\">1</span> of the <span class=\"token keyword type-declaration\">string</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Line <span class=\"token number\">2</span> of the <span class=\"token keyword type-declaration\">string</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">TEXT</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><span class=\"rainbow\">nowdoc 语法：</span></p>\n<ul>\n<li>类似于 heredoc，但是不解析其中的变量，适用于需要保持字符串内变量不变的情况。其语法使用单引号定义标识符。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token string nowdoc-string\"><span class=\"token delimiter symbol\"><span class=\"token punctuation\">&lt;&lt;&lt;'</span>EOD<span class=\"token punctuation\">'</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Example of string</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spanning multiple lines</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>using nowdoc syntax.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$variable will not be parsed.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token delimiter symbol\">EOD<span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://gyzero.shop/2023/11/16/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/php%E5%9F%BA%E7%A1%80/php%E8%AF%AD%E6%B3%95-%E5%8F%98%E9%87%8F/php%E8%AF%AD%E6%B3%95-%E5%8F%98%E9%87%8F/",
            "url": "http://gyzero.shop/2023/11/16/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/php%E5%9F%BA%E7%A1%80/php%E8%AF%AD%E6%B3%95-%E5%8F%98%E9%87%8F/php%E8%AF%AD%E6%B3%95-%E5%8F%98%E9%87%8F/",
            "title": "php语法-变量",
            "date_published": "2023-11-16T07:41:03.000Z",
            "content_html": "<p>PHP 语言在网络安全方面扮演着重要的角色，主要因为它是最流行的服务器端脚本语言之一，广泛用于网页开发。然而，由于其广泛的使用和某些特性，PHP 也与多种网络安全问题相关联。</p>\n<p>PHP 是一种广泛使用的开源脚本语言，特别适合于网页开发，并且可以嵌入到 HTML 中。下面是一些基本的 PHP 语法要点：</p>\n<h3 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> <mark>基本语法</mark></h3>\n<ul>\n<li>PHP 脚本以  <code>&lt;?php</code>  开始，以  <code>?&gt;</code>  结束。</li>\n<li>PHP 脚本可以放在 HTML 文档中的任何位置。</li>\n<li>PHP 语句以分号  <code>;</code>  结束。</li>\n</ul>\n<p>例如；</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>网页端就会返回</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/php/image-20231116160229423.png\" alt=\"image-20231116160229423\"></p>\n<h3 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> <mark>注释</mark></h3>\n<ul>\n<li>单行注释可以用  <code>//</code>  或  <code>#</code> 。</li>\n<li>多行注释使用  <code>/* 注释内容 */</code> 。</li>\n</ul>\n<h4 id=\"单行注释\"><a class=\"markdownIt-Anchor\" href=\"#单行注释\">#</a> <mark>单行注释</mark></h4>\n<ul>\n<li>使用两个正斜杠  <code>//</code>  开始的注释。从  <code>//</code>  开始到行末的所有内容都会被视为注释。</li>\n<li>井号  <code>#</code>  也可以用于单行注释，它的作用与  <code>//</code>  相同。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这是一个单行注释</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 这也是一个单行注释</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"PHP is fun!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h4 id=\"多行注释\"><a class=\"markdownIt-Anchor\" href=\"#多行注释\">#</a> <mark>多行注释</mark></h4>\n<ul>\n<li>由一对  <code>/*</code>  和  <code>*/</code>  包裹的注释。这种注释可以跨越多行。</li>\n<li>多行注释通常用于提供关于代码块的详细说明或者在需要时临时移除代码块。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 这是一个多行注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   它跨越了</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   多行 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h4 id=\"文档性注释\"><a class=\"markdownIt-Anchor\" href=\"#文档性注释\">#</a> <mark>文档性注释</mark></h4>\n<ul>\n<li>用于生成文档的特殊多行注释，以两个星号开始  <code>/**</code> ，然后是多行注释内容，最后以  <code>*/</code>  结束。</li>\n<li>这种注释风格通常用于自动化的文档生成工具，比如 PHPDocumentor。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 获取用户名称</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 该函数用于从数据库获取用户名称</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param int $userID 用户 ID</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @return string 返回用户名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 函数实现</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>在实际的 PHP 编程中，合理地使用注释可以使代码更容易理解和维护。但是也要注意不要过度注释，尤其是对于自解释性强的代码</p>\n<h3 id=\"php中的变量\"><a class=\"markdownIt-Anchor\" href=\"#php中的变量\">#</a> <mark>php 中的变量</mark></h3>\n<p>PHP 中的变量是用来存储信息的容器。在 PHP 中，变量的使用有几个关键特点和规则：</p>\n<h4 id=\"变量的定义\"><a class=\"markdownIt-Anchor\" href=\"#变量的定义\">#</a> <mark>变量的定义</mark></h4>\n<ul>\n<li>PHP 中的变量以美元符号  <code>$</code>  开始，后面跟变量的名称。</li>\n<li>变量名称必须以字母或下划线开始，后面可以跟字母、数字或下划线。</li>\n<li>PHP 变量名称区分大小写。</li>\n</ul>\n<h4 id=\"变量赋值\"><a class=\"markdownIt-Anchor\" href=\"#变量赋值\">#</a> <mark>变量赋值</mark></h4>\n<ul>\n<li>使用等号  <code>=</code>  来为变量赋值。</li>\n<li>PHP 是一种弱类型语言，不需要声明变量的类型。变量的类型由它的值决定。</li>\n</ul>\n<p>示例 :</p>\n<pre><code>&lt;?php\n$text = &quot;Hello 你好&quot;;  // 字符串类型\n$number = 9999;          // 整型\n$float = 12.34;         // 浮点型\n$bool = true;           // 布尔型\n$array = array('zxc', 'vbn', 'bnm'); // 数组\necho &quot;变量text为：$text&quot;;\necho &quot;变量number为：$number&quot;;\necho &quot;变量为float：$float&quot;;\nvar_dump($array);\n?&gt;\n</code></pre>\n<p>页面显示</p>\n<p><img data-src=\"https://tuchuang-1309689803.cos.ap-nanjing.myqcloud.com/php/image-20231116163846928.png\" alt=\"image-20231116163846928\"></p>\n<div class=\"note primary\">\n<p>PHP 是一种动态类型语言。这意味着同一个变量可以用来存储不同类型的数据：</p>\n</div>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//x 是一个整数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Sally\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 现在 x 是一个字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h4 id=\"变量作用域\"><a class=\"markdownIt-Anchor\" href=\"#变量作用域\">#</a> <mark>变量作用域</mark></h4>\n<ul>\n<li>在 PHP 中，变量的作用域可以是局部的、全局的或静态的。</li>\n<li>局部变量仅在函数内部有效。</li>\n<li>全局变量在脚本的任何部分都有效，但在函数内部需要用   <code>global</code>  关键字来访问。</li>\n<li>静态变量当函数执行完毕后不会被删除，而是保持其值。</li>\n</ul>\n<div class=\"note info\">\n<p>局部作用域（Local）</p>\n</div>\n<ul>\n<li>局部变量仅在函数内部声明和访问。</li>\n<li>函数外部无法访问函数内部的局部变量。</li>\n<li>每当函数执行时，局部变量都会被创建，函数执行结束时，局部变量会被销毁。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 局部作用域 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">myTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部作用域</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用这行将会产生错误，因为 $x 在函数外部是不可用的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><div class=\"note info\">\n<p>全局作用域（Global）</p>\n</div>\n<ul>\n<li>在函数外部声明的变量拥有全局作用域。</li>\n<li>全局变量在函数外部可以访问，但默认情况下在函数内部是无法访问的。</li>\n<li>要在一个函数内部访问一个全局变量，需要使用   <code>global</code>  关键字。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局作用域</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">my</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">global</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//global 引用全局变量 $x</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">my</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 5</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><ul>\n<li>另一种访问全局变量的方法是使用   <code>$GLOBALS[index]</code>  数组。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$y</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">my</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'y'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 10</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>静态作用域（Static）</p>\n</div>\n<ul>\n<li>使用   <code>static</code>  关键字时，函数内的局部变量在函数调用完成后不会被删除。</li>\n<li>静态变量仅在局部函数作用域内存在，但它们不会在函数调用之间丢失其值。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$x</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><div class=\"note info\">\n<p>参数作用域（Function arguments）</p>\n</div>\n<ul>\n<li>函数参数（在函数调用时传递给函数的变量）具有自己的作用域。</li>\n<li>只有在函数内部，参数才是可用的。</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">vvv</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// $x 是一个参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">vvv</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>理解这些不同的作用域对于编写可靠和可维护的 PHP 代码非常重要。不恰当的作用域使用可能导致难以跟踪的错误和安全问题。</p>\n",
            "tags": []
        }
    ]
}